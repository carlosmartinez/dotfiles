set shell=/bin/bash
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'

Bundle 'altercation/vim-colors-solarized'
Bundle 'jlanzarotta/bufexplorer'
Plugin 'airblade/vim-gitgutter'
Plugin 'burnettk/vim-angular'
Plugin 'chriskempson/base16-vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'ecomba/vim-ruby-refactoring'
Plugin 'ervandew/supertab'
Plugin 'godlygeek/tabular'
Plugin 'int3/vim-extradite'
Plugin 'jasoncodes/ctrlp-modified.vim'
Plugin 'jgdavey/vim-blockle'
Plugin 'jremmen/vim-ripgrep'
Plugin 'kien/ctrlp.vim'
Plugin 'matchit.zip'
Plugin 'mattn/emmet-vim'
Plugin 'mileszs/ack.vim'
Plugin 'othree/html5.vim'
Plugin 'rake.vim'
Plugin 'repeat.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-surround'
Plugin 'unimpaired.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-scripts/tComment'

call vundle#end()
filetype plugin indent on
syntax enable

set t_Co=256
set clipboard=unnamed

" don't insert a line break at 80 chars, thanks
set tw=0
set splitbelow
set splitright

set lbr

" Open and reload vimrc
map <leader>vrc :edit $MYVIMRC<cr>
map <leader>1 :source $MYVIMRC<cr>:echo "VIMRC reloaded"<cr>

" emmet settings
let g:user_emmet_leader_key='<C-Y>'

map <leader>rc :%!ruby-class-generator<cr>
vmap <leader>rc <esc>:'<,'> !ruby-class-generator<cr>

inoremap <C-s> <esc>:w<cr>
nnoremap <C-s> :w<cr>

set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize
set guioptions-=T " no toolbar
" set statusline=%<%f\ %h%m%r%=%-20.(line=%l,col=%c%V,totlin=%L%)\%h%m%r%=%-40(,%n%Y%)\%P%#warningmsg#%{SyntasticStatuslineFlag()}%*
set laststatus=2  " Always show status line.
set number " line numbers
set scrolloff=3 " More context around cursor
set hlsearch  " highlight search matches...
set incsearch " ...as you type
" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase
set hidden " Allow buffer switching without saving
set history=1000
set wildmode=list:longest " Shell-like behaviour for command autocompletion
set list listchars=tab:»·,trail:·,nbsp:·
set visualbell
set mousehide
set cf  " Enable error files & error jumping.
set autowrite  " Writes on make/shell commands
set ruler  " Ruler on
set nowrap  " Line wrapping off
set timeoutlen=500
" swap files are really not needed if you're using git
set noswapfile
let mapleader = ","

set cc=80

set tabstop=2
set smarttab
set shiftwidth=2
set autoindent
set expandtab
set backspace=start,indent,eol

" Make the current window big, but leave others context	
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999

" mouse mode for terminal
set mouse=a

autocmd FileType make set noexpandtab

" treat scss files as css
au BufRead,BufNewFile *.scss set filetype=css

runtime! plugin/matchit.vim " extends % to do/end etc

" DAS trick for outputting current dir name in cmd-line mode
cnoremap <expr> %% expand('%:h').'/'

" Rename current file
map <leader>n :call RenameFile()<cr>

" Highlight trailing whitespace
highlight RedundantSpaces term=standout ctermbg=red guibg=red
match RedundantSpaces /\s\+$\| \+\ze\t/ "\ze sets end of match so only spaces highlighted

" ,h to dismiss search result highlighting until next search or press of 'n'
:noremap <silent> <leader>h :noh<CR>

" ,w to toggle line wrap
:map <silent> <Leader>w :set wrap!<CR>

" ,f to find current file in NERDTree
map <silent> <Leader>f :NERDTreeFind<CR>

" ,m to toggle NERDTree
nmap <silent> <Leader>m :NERDTreeToggle<CR>

" ,x to open git commit history for current file
nnoremap <Leader>x :Extradite<CR>

" ,, to run current spec file
" map <Leader>, :wa\|:!rspec %<CR>

" Fix supertab/endwise incompatibility
let g:SuperTabCrMapping = 0

" ,r for rake
map <Leader>r :Rake<CR>

" ,s to toggle spelling highlighting
nmap <silent> <Leader>s :setlocal spell! spelllang=en_gb<CR>

" ,j to format json nicely
map <Leader>j !python -m json.tool<CR>

"CtrlP
set runtimepath^=~/.vim/bundle/ctrlp.vim
map <leader>t :CtrlP<cr>
map <leader>g :CtrlPModified<cr>
let g:ctrlp_show_hidden = 1

"Integrate CtrlP with Platinum Searcher
set grepprg=rg\ --color=never
let g:ctrlp_user_command = 'rg %s --files --glob ""'
let g:ctrlp_use_caching = 0

" airline
let g:airline_theme='jellybeans'

" For solarized plugin (color scheme)
" https://github.com/altercation/vim-colors-solarized
syntax enable
set background=dark
let g:solarized_termtrans = 1
" colorscheme solarized
colorscheme base16-tomorrow-night

" Vim-markdown
let g:vim_markdown_folding_disabled=1

" make Y consistent with C and D
nnoremap Y y$

" Rename current file thanks @samphippen via @bestie
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

" strip trailing whitespace
"autocmd BufWritePre,FileWritePre * call StripTrailingWhitespace()
function! StripTrailingWhitespace()
  normal mz
  normal Hmy
  exec '%s/\s*$//g'
  normal 'yz<cr>
  normal `z
endfunction
nmap <silent> <Leader>sw :call StripTrailingWhitespace()<CR>

let g:syntastic_auto_loc_list=1
let g:syntastic_html_tidy_ignore_errors = [ '<tabset>', '<tab>', 'mno-' ]
let g:syntastic_ruby_checkers=['rubocop', 'mri']
let g:syntastic_quiet_messages = { 'regex': ['line is too long', 'reference to past', 'align the operands', 'prefer single*', 'avoid comma', 'Missing top-level class documentation comment', 'Indent access modifiers', 'Do not use `::` for method calls', 'Missing frozen string literal comment'] }
autocmd VimEnter * SyntasticToggleMode 

" :SudoW to save file using sudo (must be already authorised, eg sudo -v)
command! -bar -nargs=0 SudoW   :silent exe "write !sudo tee % >/dev/null"|silent edit!

" Use xmllint to pretty format XML
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null

" settings for the git-gutter
highlight SignColumn ctermbg=234

" Source a local configuration file if available.
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPS TO JUMP TO SPECIFIC FILES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>gr :topleft :split config/routes.rb<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>
function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! rake -s routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . "_ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction
map <leader>gR :call ShowRoutes()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RemoveFancyCharacters COMMAND
" Remove smart quotes, etc.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RemoveFancyCharacters()
    let typo = {}
    let typo["“"] = '"'
    let typo["”"] = '"'
    let typo["‘"] = "'"
    let typo["’"] = "'"
    let typo["–"] = '--'
    let typo["—"] = '---'
    let typo["…"] = '...'
    :exe ":%s/".join(keys(typo), '\|').'/\=typo[submatch(0)]/ge'
endfunction
command! RemoveFancyCharacters :call RemoveFancyCharacters()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Running tests
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RunTests(filename)
  " Write the file and run tests for the given filename
  :w
  :silent !echo;echo;echo;echo;echo
  exec ":!bundle exec rspec " . a:filename
endfunction

function! SetTestFile()
  " Set the spec file that tests will be run for.
  let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
  if a:0
    let command_suffix = a:1
  else
    let command_suffix = ""
  endif

  " Run the tests for the previously-marked file.
  let in_spec_file = match(expand("%"), '_spec.rb$') != -1
  if in_spec_file
    call SetTestFile()
  elseif !exists("t:grb_test_file")
    return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
  let spec_line_number = line('.')
  call RunTestFile(":" . spec_line_number)
endfunction

" Run this file
map <leader>t :call RunTestFile()<cr>
" Run only the example under the cursor
map <leader>T :call RunNearestTest()<cr>
" Run all test files
map <leader>a :call RunTests('spec')<cr>


" Switch between the last two files
nnoremap <leader><leader> <c-^>
onoremap <silent> j gj
onoremap <silent> k gk
